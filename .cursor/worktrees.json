{
  "setup-worktree": [
    "#Requires -Version 5.1",
    "$ErrorActionPreference = \"Stop\"",
    "Write-Host \"▶ Git submodules/LFS\"",
    "git submodule update --init --recursive | Out-Null",
    "try { git lfs install --local; git lfs pull } catch {}",
    "Write-Host \"▶ Node deps (lockfile 우선)\"",
    "if (Test-Path pnpm-lock.yaml) {",
    "try { corepack enable } catch {}",
    "try { pnpm -v } catch { corepack prepare pnpm@latest --activate }",
    "pnpm install --frozen-lockfile",
    "} elseif (Test-Path yarn.lock) {",
    "try { corepack enable } catch {}",
    "try { yarn -v } catch { corepack prepare yarn@stable --activate }",
    "try { yarn install --immutable } catch { yarn install }",
    "} elseif (Test-Path package.json) {",
    "try { npm ci } catch { npm install }",
    "}",
    "Write-Host \"▶ Python venv + deps\"",
    "$py = $env:PYTHON_BIN; if (-not $py) { $py = \"python\" }",
    "try {",
    "& $py -m venv .venv",
    ".\\.venv\\Scripts\\Activate.ps1",
    "python -m pip install -U pip wheel setuptools",
    "if (Test-Path requirements.txt) { pip install -r requirements.txt }",
    "} catch {}",
    "Write-Host \"▶ pre-commit hooks\"",
    "if (Test-Path \".pre-commit-config.yaml\") {",
    "try { pre-commit install --install-hooks } catch {}",
    "}",
    "Write-Host \"▶ env/bootstrap\"",
    "if ((-not (Test-Path \".env\")) -and (Test-Path \".env.example\")) { Copy-Item .env.example .env }",
    "Write-Host \"✓ Worktree setup done\""
  ]
}
