# --------------------------------------------------------------
#  DSV AL MARKAZ – IN/OUT DASHBOARD
#  (uses the dataframe `df` prepared in the notebook)
# --------------------------------------------------------------

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
from datetime import datetime

# --------------------------------------------------------------
# 1. Make sure the prepared dataframe exists
# --------------------------------------------------------------
# (the notebook already created `df`, `inbound_flow`, `outbound_flow`, `current_inventory`)
# If you run this in a fresh kernel, re-run the preparation cell first.

# --------------------------------------------------------------
# 2. Helper: turn the dicts into tidy DataFrames
# --------------------------------------------------------------
def dict_to_df(flow_dict, kind):
    rows = []
    for loc, month_counts in flow_dict.items():
        for ym, cnt in month_counts.items():
            rows.append({"Location": loc, "Month": ym, "Count": cnt, "Type": kind})
    return pd.DataFrame(rows)

df_in  = dict_to_df(inbound_flow,  "Inbound")
df_out = dict_to_df(outbound_flow, "Outbound")
df_flow = pd.concat([df_in, df_out], ignore_index=True)

# --------------------------------------------------------------
# 3. Current inventory bar
# --------------------------------------------------------------
inv_df = pd.DataFrame([
    {"Location": loc, "Items": cnt}
    for loc, cnt in current_inventory.items()
])
inv_df = inv_df.sort_values("Items", ascending=False)

# --------------------------------------------------------------
# 4. Plotly dashboard (4 sub-plots)
# --------------------------------------------------------------
fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=(
        "Current Inventory by Location",
        "Monthly Inbound vs Outbound",
        "Inbound Heatmap (Warehouse)",
        "Outbound Heatmap (Site)"
    ),
    specs=[[{"type": "bar"}, {"type": "scatter"}],
           [{"type": "heatmap"}, {"type": "heatmap"}]],
    vertical_spacing=0.12, horizontal_spacing=0.12
)

# ---- 1. Inventory bar -------------------------------------------------
fig.add_trace(
    go.Bar(x=inv_df["Location"], y=inv_df["Items"],
           name="Inventory", marker_color="#1f77b4"),
    row=1, col=1
)

# ---- 2. Monthly flow line --------------------------------------------
monthly = df_flow.groupby(["Month", "Type"])["Count"].sum().reset_index()
monthly = monthly.pivot(index="Month", columns="Type", values="Count").fillna(0)
monthly = monthly.reset_index()

fig.add_trace(
    go.Scatter(x=monthly["Month"], y=monthly["Inbound"],
               mode="lines+markers", name="Inbound", line=dict(color="#2ca02c")),
    row=1, col=2
)
fig.add_trace(
    go.Scatter(x=monthly["Month"], y=monthly["Outbound"],
               mode="lines+markers", name="Outbound", line=dict(color="#d62728")),
    row=1, col=2
)

# ---- 3. Inbound heatmap (warehouses) ---------------------------------
in_piv = df_in.pivot_table(index="Location", columns="Month", values="Count", fill_value=0)
fig.add_trace(
    go.Heatmap(z=in_piv.values, x=in_piv.columns, y=in_piv.index,
               colorscale="Greens", name="Inbound"),
    row=2, col=1
)

# ---- 4. Outbound heatmap (sites) ------------------------------------
out_piv = df_out.pivot_table(index="Location", columns="Month", values="Count", fill_value=0)
fig.add_trace(
    go.Heatmap(z=out_piv.values, x=out_piv.columns, y=out_piv.index,
               colorscale="Reds", name="Outbound"),
    row=2, col=2
)

# --------------------------------------------------------------
# 5. Layout & styling
# --------------------------------------------------------------
fig.update_layout(
    height=900,
    title_text="<b>DSV Al Markaz – Warehouse Flow Dashboard</b><br>"
               f"<i>Data as of {datetime.now().strftime('%Y-%m-%d')}</i>",
    title_x=0.5,
    showlegend=True,
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
    font=dict(family="Arial, sans-serif", size=12)
)

# Axis labels
fig.update_xaxes(title_text="Location", row=1, col=1)
fig.update_yaxes(title_text="Items",   row=1, col=1)
fig.update_xaxes(title_text="Month",   row=1, col=2)
fig.update_yaxes(title_text="Cases",   row=1, col=2)

# --------------------------------------------------------------
# 6. Save & display
# --------------------------------------------------------------
dashboard_path = "DSV_AlMarkaz_Flow_Dashboard.html"
fig.write_html(dashboard_path, include_plotlyjs="cdn")
print(f"Dashboard saved to: {dashboard_path}")

# Show inline (Jupyter)
fig.show()
