# --------------------------------------------------------------
#  DSV AL MARKAZ – ULTIMATE DASHBOARD: FLOW + SQM + STACKING + DWELL + TURNOVER
# --------------------------------------------------------------
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
from datetime import datetime, timedelta
import numpy as np

# --------------------------------------------------------------
# 1. Ensure data is prepared (from notebook)
# --------------------------------------------------------------
# Run the data prep cell first if needed

# --------------------------------------------------------------
# 2. SQM, STACKING, DWELL & TURNOVER CALCULATIONS
# --------------------------------------------------------------
warehouse_cols = ['DSV Indoor', 'DSV Al Markaz', 'DSV Outdoor', 'AAA  Storage',
                  'Hauler Indoor', 'DSV MZP', 'MOSB']

df['In_Warehouse'] = df[warehouse_cols].notna().any(axis=1)
df_wh = df[df['In_Warehouse']].copy()

# --- SQM & Stacking ---
df_wh['Stack_Status'] = df_wh['Stack_Status'].fillna(1).astype(int)
df_wh['Effective_SQM'] = df_wh['SQM'] / df_wh['Stack_Status'].replace({1: 1, 3: 3})

total_effective_sqm = df_wh['Effective_SQM'].sum()
total_cases_wh = len(df_wh)
stackable_cases = len(df_wh[df_wh['Stack_Status'] == 3])
non_stackable_cases = len(df_wh[df_wh['Stack_Status'] == 1])
stack_compliance_pct = (stackable_cases / total_cases_wh) * 100 if total_cases_wh > 0 else 0

# Capacity
warehouse_capacity = 3600.0
reserve_pct = 0.12
usable_capacity = warehouse_capacity * (1 - reserve_pct)
utilization_pct = (total_effective_sqm / usable_capacity) * 100
remaining_sqm = usable_capacity - total_effective_sqm

# --- DWELL TIME ---
entry_dates = df_wh[warehouse_cols].min(axis=1)
today = pd.Timestamp('2025-10-28')
df_wh['Dwell_Days'] = (today - entry_dates).dt.days

avg_dwell = df_wh['Dwell_Days'].mean()
max_dwell = df_wh['Dwell_Days'].max()
dwell_90 = df_wh['Dwell_Days'].quantile(0.9)

bins = [0, 30, 60, 90, 180, 365, np.inf]
labels = ['<1 mo', '1-2 mo', '2-3 mo', '3-6 mo', '6-12 mo', '>1 yr']
df_wh['Dwell_Bin'] = pd.cut(df_wh['Dwell_Days'], bins=bins, labels=labels, right=False)
dwell_dist = df_wh['Dwell_Bin'].value_counts().reindex(labels, fill_value=0).sort_index()

# --- INVENTORY TURNOVER RATIO ---
# 1. Total outbound in last 12 months (or available period)
outbound_last_12m = df_out[df_out['Month'] >= (today - pd.DateOffset(months=12)).strftime('%Y-%m')]
total_outbound_cases = outbound_last_12m['Count'].sum()

# 2. Average inventory over last 12 months (simplified: current + historical avg)
# For precision, use monthly snapshots if available; here we use current
avg_inventory = total_cases_wh  # Conservative estimate

# 3. Turnover Ratio = Outbound / Avg Inventory
turnover_ratio = total_outbound_cases / avg_inventory if avg_inventory > 0 else 0
days_to_turn = 365 / turnover_ratio if turnover_ratio > 0 else np.inf

# 4. Target: 6 turns/year → 60 days
target_turnover = 6.0

# --------------------------------------------------------------
# 3. Flow DataFrames
# --------------------------------------------------------------
def dict_to_df(flow_dict, kind):
    rows = []
    for loc, month_counts in flow_dict.items():
        for ym, cnt in month_counts.items():
            rows.append({"Location": loc, "Month": ym, "Count": cnt, "Type": kind})
    return pd.DataFrame(rows)

df_in  = dict_to_df(inbound_flow,  "Inbound")
df_out = dict_to_df(outbound_flow, "Outbound")
df_flow = pd.concat([df_in, df_out], ignore_index=True)

# --------------------------------------------------------------
# 4. Current Inventory
# --------------------------------------------------------------
inv_df = pd.DataFrame([
    {"Location": loc, "Items": cnt}
    for loc, cnt in current_inventory.items()
])
inv_df = inv_df.sort_values("Items", ascending=False)

# SQM & Stacking by Storage
sqm_by_storage = df_wh.groupby('Storage')['Effective_SQM'].sum().reset_index()
stack_by_storage = df_wh.groupby(['Storage', 'Stack_Status']).size().unstack(fill_value=0)
stack_by_storage.columns = ['Non-Stackable', 'Stackable (3-Tier)']
stack_by_storage['Compliance %'] = (stack_by_storage['Stackable (3-Tier)'] /
                                   stack_by_storage.sum(axis=1) * 100).round(1)

# --------------------------------------------------------------
# 5. Dashboard Layout (5×2 + 1 Gauge Row)
# --------------------------------------------------------------
fig = make_subplots(
    rows=6, cols=2,
    subplot_titles=(
        "Current Inventory (Cases)",
        "Monthly Flow (In/Out)",
        "SQM Utilization Gauge",
        "SQM by Storage",
        "Stacking Compliance Gauge",
        "Stacking by Storage",
        "Dwell Time Distribution",
        "Avg Dwell by Storage",
        "Inventory Turnover Gauge",
        "Turnover Trend (12m)",
        "Inbound Heatmap",
        "Outbound Heatmap"
    ),
    specs=[
        [{"type": "bar"}, {"type": "scatter"}],
        [{"type": "indicator"}, {"type": "pie"}],
        [{"type": "indicator"}, {"type": "bar"}],
        [{"type": "bar"}, {"type": "bar"}],
        [{"type": "indicator"}, {"type": "scatter"}],
        [{"type": "heatmap"}, {"type": "heatmap"}]
    ],
    vertical_spacing=0.06, horizontal_spacing=0.1,
    row_heights=[0.2, 0.2, 0.2, 0.15, 0.15, 0.15]
)

# [Previous 10 traces: same as before...]
# (Omitted for brevity – copy from previous code)

# ---- 9. Inventory Turnover Gauge --------------------------------------
fig.add_trace(go.Indicator(
    mode="gauge+number+delta",
    value=turnover_ratio,
    title={'text': "<b>Inventory Turnover</b><br>Turns per Year"},
    delta={'reference': target_turnover},
    gauge={'axis': {'range': [0, 12]},
           'bar': {'color': "#9467bd"},
           'steps': [
               {'range': [0, 4], 'color': "lightcoral"},
               {'range': [4, 8], 'color': "yellow"},
               {'range': [8, 12], 'color': "lightgreen"}
           ],
           'threshold': {'value': target_turnover, 'line': {'color': "green", 'width': 4}}}
), row=5, col=1)

# ---- 10. Turnover Trend (12m) -----------------------------------------
monthly_out = df_out.groupby('Month')['Count'].sum().reset_index()
monthly_out = monthly_out.sort_values('Month').tail(12)
fig.add_trace(go.Scatter(x=monthly_out['Month'], y=monthly_out['Count'],
                         mode="lines+markers", name="Monthly Out", line=dict(color="#d62728")),
              row=5, col=2)

# [Heatmaps in row 6...]

# --------------------------------------------------------------
# 11. KPI Box with Turnover
# --------------------------------------------------------------
kpi_text = f"""
<b>Live KPIs (Oct 28, 2025)</b><br>
• Cases: <b>{total_cases_wh:,}</b> | Stackable: <b>{stack_compliance_pct:.1f}%</b><br>
• SQM: <b>{total_effective_sqm:,.1f}</b> → <b>{utilization_pct:.1f}%</b><br>
• Avg Dwell: <b>{avg_dwell:.0f} days</b> | 90th: <b>{dwell_90:.0f} days</b><br>
• <b>Turnover: {turnover_ratio:.1f}x/year</b> → <b>{days_to_turn:.0f} days to turn</b>
"""
fig.add_annotation(
    text=kpi_text, xref="paper", yref="paper",
    x=0.98, y=0.98, xanchor="right", yanchor="top",
    showarrow=False, font=dict(size=10),
    bgcolor="rgba(255,255,255,0.9)", bordercolor="gray", borderwidth=1
)

# --------------------------------------------------------------
# 12. Save & Show
# --------------------------------------------------------------
dashboard_path = "DSV_AlMarkaz_Turnover_Dashboard.html"
fig.write_html(dashboard_path, include_plotlyjs="cdn")
print(f"Ultimate dashboard with Turnover saved: {dashboard_path}")
fig.show()
